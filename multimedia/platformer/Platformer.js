// Generated by Haxe 3.4.4
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var core_Game = function(name,width,height,color) {
	if(color == null) {
		color = "#FFF";
	}
	this.lastKey = [];
	var _gthis = this;
	this.canvas = window.document.createElement("canvas");
	this.context = this.canvas.getContext("2d",null);
	this.canvas.id = name + ":canvas";
	this.canvas.width = this.width = width;
	this.canvas.height = this.height = height;
	this.canvas.style.width = width + "px";
	this.canvas.style.height = height + "px";
	this.canvas.style.backgroundColor = color;
	this.context.font = "10pt sans-serif";
	core_Graphics.setContext(this.context);
	window.document.body.appendChild(this.canvas);
	window.document.addEventListener("keyup",function(e) {
		_gthis.onKeyUp(e);
		_gthis.lastKey[e.keyCode] = false;
	},false);
	window.document.addEventListener("keydown",function(e1) {
		_gthis.onKeyDown(e1);
		_gthis.lastKey[e1.keyCode] = true;
	},false);
	this.init();
	this.then = Date.now();
	this.loop();
};
core_Game.prototype = {
	loop: function() {
		this.now = Date.now();
		this.dt = (this.now - this.then) / 1000;
		this.then = this.now;
		this.context.clearRect(0,0,this.width,this.height);
		this.update(this.dt);
		this.draw();
		requestAnimationFrame($bind(this,this.loop));
	}
	,init: function() {
	}
	,update: function(dt) {
	}
	,draw: function() {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,setColor: function(color) {
		this.canvas.style.backgroundColor = color;
	}
	,getWidth: function() {
		return this.width;
	}
	,getHeight: function() {
		return this.height;
	}
	,isDown: function(e) {
		return this.lastKey[e] == true;
	}
};
var Main = function() {
	core_Game.call(this,"platformer",800,600,"#000");
	this.canvas.style.width = this.canvas.style.height = "100%";
	window.document.body.style.margin = "0 0 0";
};
Main.main = function() {
	window.document.body.style.margin = "0 0 0";
	new Main();
};
Main.__super__ = core_Game;
Main.prototype = $extend(core_Game.prototype,{
	init: function() {
		this.map = [[0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1],[0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0],[0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1],[0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]];
		this.actor = new Actor();
		this.box = new Box();
		this.wall = new Image();
		this.wall.src = "wall.png";
		this.floor = new Image();
		this.floor.src = "floor.png";
		this.stand = new Image();
		this.stand.src = "stand.png";
		this.run = new Image();
		this.run.src = "run.png";
		this.fall = new Image();
		this.fall.src = "fall.png";
		core_Graphics.setColor(255,255,255);
	}
	,update: function(dt) {
		this.actor.v_velocity += this.actor.v_accel * dt;
		this.actor._y = this.actor.y + this.actor.v_velocity;
		if(this.isDown(37)) {
			this.actor.h_velocity -= this.actor.h_accel * dt;
		} else if(this.isDown(39)) {
			this.actor.h_velocity += this.actor.h_accel * dt;
		}
		this.actor.h_velocity = this.actor.h_velocity > 0 ? Math.min(this.actor.h_velocity,2) : Math.max(-2,this.actor.h_velocity);
		this.actor._x = this.actor.x + this.actor.h_velocity;
		if(!this.boxCollision(this.actor.x,this.actor._y,20)) {
			this.actor.y = this.actor._y;
		} else {
			this.actor.v_velocity = 0;
		}
		if(!this.boxCollision(this.actor._x,this.actor.y,20)) {
			this.actor.x = this.actor._x;
		} else {
			this.actor.h_velocity = 0;
		}
		if(this.actor.h_velocity > 0) {
			this.actor.h_velocity -= 8 * dt;
		} else if(this.actor.h_velocity < 0) {
			this.actor.h_velocity += 8 * dt;
		}
		if(Math.abs(this.actor.h_velocity) < 0.05) {
			this.actor.h_velocity = 0;
		}
		if(this.typeCollision(this.actor.x,this.actor._y,20,30,2) && this.actor.y > this.actor._y) {
			this.actor.score++;
			this.map[Math.floor(this.actor.y / 32) - 1][Math.floor(this.actor.x / 32)] = 1;
		}
	}
	,onKeyUp: function(e) {
		if(e.keyCode == 38) {
			this.actor.v_velocity = -5;
		}
	}
	,draw: function() {
		var _g = 0;
		while(_g < 9) {
			var y = _g++;
			var _g1 = 0;
			while(_g1 < 19) {
				var x = _g1++;
				if(this.map[y][x] != 0) {
					if(this.map[y][x] == 1) {
						core_Graphics.draw(this.wall,x * 32,y * 32,32,32);
					} else if(this.map[y][x] == 2) {
						core_Graphics.draw(this.floor,x * 32,y * 32,32,32);
					}
				}
			}
		}
		if(Math.abs(this.actor.h_velocity) > 0.05) {
			if(this.actor.h_velocity > 0) {
				core_Graphics.draw(this.run,this.actor.x,this.actor.y,20,32);
			} else {
				core_Graphics.draw(this.run,this.actor.x,this.actor.y,20,32,true);
			}
		} else if(Math.abs(this.actor.v_velocity) > 0) {
			core_Graphics.draw(this.fall,this.actor.x,this.actor.y,20,32);
		} else {
			core_Graphics.draw(this.stand,this.actor.x,this.actor.y,20,32);
		}
		core_Graphics.print("x " + this.actor.x + " y " + this.actor.y + " vel " + this.actor.v_velocity,10,580);
		core_Graphics.print("Score: " + this.actor.score,0,0);
	}
	,boxCollision: function(x,y,w,h) {
		if(h == null) {
			h = 30;
		}
		var _g = 0;
		while(_g < 9) {
			var gy = _g++;
			var _g1 = 0;
			while(_g1 < 19) {
				var gx = _g1++;
				if(this.map[gy][gx] != 0 && x + w > gx * 32 && y + h > gy * 32 && x - 32 < gx * 32 && y - 32 < gy * 32) {
					return true;
				}
			}
		}
		return false;
	}
	,typeCollision: function(x,y,w,h,type) {
		if(type == null) {
			type = 1;
		}
		if(h == null) {
			h = 30;
		}
		var _g = 0;
		while(_g < 9) {
			var gy = _g++;
			var _g1 = 0;
			while(_g1 < 19) {
				var gx = _g1++;
				if(this.map[gy][gx] == type && x + w > gx * 32 && y + h > gy * 32 && x - 32 < gx * 32 && y - 32 < gy * 32) {
					return true;
				}
			}
		}
		return false;
	}
});
var Actor = function() {
	this.inversed = false;
	this.score = 0;
	this.isGround = false;
	this.h_accel = 75;
	this.v_wall_vel = 0;
	this.v_accel = 12.8;
	this.h_velocity = 0;
	this.v_velocity = 0;
	this._y = 0;
	this._x = 0;
	this.y = 0;
	this.x = 0;
};
var Box = function() {
	this.v_accel = 0.00064;
	this.h_velocity = 0;
	this.v_velocity = 0;
	this._y = 0;
	this._x = 0;
	this.y = 64;
	this.x = 256;
};
var core_Graphics = function() {
};
core_Graphics.setContext = function(ctx) {
	core_Graphics.context = ctx;
};
core_Graphics.setColor = function(r,g,b) {
	core_Graphics.context.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
};
core_Graphics.draw = function(drawable,x,y,width,height,flipH,flipV) {
	if(flipV == null) {
		flipV = false;
	}
	if(flipH == null) {
		flipH = false;
	}
	core_Graphics.context.save();
	if(flipH) {
		core_Graphics.context.translate(width,0);
		core_Graphics.context.scale(-1,1);
		x = -x;
	}
	if(flipV) {
		core_Graphics.context.translate(0,height);
		core_Graphics.context.scale(1,-1);
		y = -y;
	}
	core_Graphics.context.drawImage(drawable,x,y,width,height);
	core_Graphics.context.restore();
};
core_Graphics.rectangle = function(x,y,w,h) {
	core_Graphics.context.fillRect(x,y,w,h);
};
core_Graphics.print = function(caption,x,y) {
	core_Graphics.context.fillText(caption,x,y + 10);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Main.main();
})();
